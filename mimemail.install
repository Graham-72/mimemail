<?php

/**
 * @file
 * Install, update and uninstall functions for Mime Mail module.
 */

/**
 * Implements hook_enable().
 */
function mimemail_enable() {
  module_load_include('module', 'mailsystem');
  mailsystem_set(
    array(
      mailsystem_default_id() => 'MimeMailSystem',
      'mimemail' => 'MimeMailSystem',
    )
  );

  $line_endings = settings_get('mail_line_endings', MAIL_LINE_ENDINGS);
	config_set('mimemail.settings','mimemail_crlf',$line_endings);

  user_role_grant_permissions(BACKDROP_AUTHENTICATED_ROLE, array('edit mimemail user settings'));
}

/**
 * Implements hook_disable().
 */
function mimemail_disable() {
  mailsystem_clear(array('mimemail' => 'MimeMailSystem'));
  config_get('mimemail.settings', 'mimemail_alter');
}

/**
 * Implements hook_requirements().
 *
 * Ensures that the newly-required Mail System module is available, or else
 * disables the Mime Mail module and returns an informative error message.
 */
function mimemail_requirements($phase) {
  if ($phase === 'install' || module_exists('mailsystem')) {
    return array();
  }
  $args = array(
    '!mailsystem' => url('http://drupal.org/project/mailsystem'),
    '%mailsystem' => 'Mail System',
    '!mimemail' => url('http://drupal.org/project/mimemail'),
    '%mimemail' => 'Mime Mail',
  );
  if ( module_enable(array('mailsystem'))
    && module_load_include('module', 'mailsystem')
  ) {
    backdrop_set_message(
      t('The %mailsystem module has been enabled because the %mimemail module now requires it.', $args)
    );
    return array();
  }
  return array(
    'mimemail_mailsystem' => array(
      'title' => t('%mailsystem module', $args),
      'value' => t('Not installed'),
      'description' => t(
        'The <a href="!smtp">%mimemail</a> module dependencies have changed.  Please download and install the required <a href="!mailsystem">%mailsystem</a> module, then re-enable the <a href="!mimemail">%mimemail</a> module.', $args
      ),
      'severity' => REQUIREMENT_ERROR,
    ),
  );
}




function migrate_update_1000() {
  $config = config('migrate.settings');

  // migrate variables
  $config->set('mimemail_crlf', update_variable_get('mimemail_crlf'));
  $config->set('mimemail_linkonly', update_variable_get('mimemail_linkonly'));
  $config->set('mimemail_alter', update_variable_get('mimemail_alter'));
  $config->set('mimemail_key', update_variable_get('mimemail_key'));
  $config->set('mimemail_incoming', update_variable_get('mimemail_incoming'));

  $config->set('mimemail_simple_address', update_variable_get('mimemail_simple_address'));
  $config->set('mimemail_engine', update_variable_get('mimemail_engine'));
  $config->set('mimemail_name', update_variable_get('mimemail_name'));
  $config->set('mimemail_mail', update_variable_get('mimemail_mail'));
  $config->set('mimemail_textonly', update_variable_get('mimemail_textonly'));

  $config->set('mimemail_sitestyle', update_variable_get('mimemail_sitestyle'));
  $config->set('mimemail_preserve_class', update_variable_get('mimemail_preserve_class'));
  $config->set('mimemail_format', update_variable_get('mimemail_format'));
  $config->save();

  // Delete variables.
  update_variable_del('mimemail_crlf');
  update_variable_del('mimemail_linkonly');
  update_variable_del('mimemail_format');
  update_variable_del('mimemail_alter');
  update_variable_del('mimemail_key');

  update_variable_del('mimemail_incoming');
  update_variable_del('mimemail_simple_address');
  update_variable_del('mimemail_engine');
  update_variable_del('mimemail_name');
  update_variable_del('mimemail_mail');

  update_variable_del('mimemail_textonly');
  update_variable_del('mimemail_sitestyle');
  update_variable_del('mimemail_preserve_class');
}
